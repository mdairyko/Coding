# This Mixed Integer Linear Program (MILP) is an application of the lower bound technique disccused in Section 2 of the paper (arXiv:1801.06404) applied 
# to the Slant grid. Also note that Section 3.2 details results on the Slant grid.

def SlantGrid(n):
    S = graphs.Grid2dGraph(n,n)
    for i in range(1, n ):
        for j in range(n-1):
            S.add_edge( (i,j) , (i-1, j+1)  )
    return S
    
# The Mixed Integer Linear Program for the Slant grid 

for n in range(3, 20, 2):
    p = MixedIntegerLinearProgram(maximization=False, solver="GLPK");
    x = p.new_variable(real=True, nonnegative=True)   
    
    Slant = SlantGrid(n) # Generated the nxn Slant grid
    Sverts = Slant.vertices()
    
    A = zero_matrix(RR,n^2,n^2) # Creates the A matrix for LP
    for i in range(n^2):
        for j in range(n^2):
            A[i, j] = (1/2)^Slant.distance(Sverts[i], Sverts[j] ) 
    one_vec = [1]*n^2
     # Creates the distance matrix for Slant grid
    SlantDist =  zero_matrix(RR,n^2,n^2) 
    for i in range(n^2):
        for j in range(n^2):
            SlantDist[i,j] = Slant.distance(Sverts[i],Sverts[j])  
    
    b = [26]*n^2
    for i in range(0,n^2):
        if divmod(i,n)[1] != 0 and divmod(i,n)[1]!= n-1:   
            b[i] = 1+ (1/2)^(SlantDist[(n^2-1)/2, i] - 1)
    
    # Finds the inner vertices of Slant grid
    list=[]
    for i in range(n,n^2-n):
        if divmod(i,n)[1] != 0 and divmod(i,n)[1]!= n-1:   
            list = list + [i]
    #make the matrix using only the rows that are inner vertices        
    c =A.matrix_from_rows(list) 
    sum=0
    
    # Adds in the constraint that 1<= Ax 
    p.add_constraint(A*x >= one_vec) 
   # Adds the constraint that the weight of the center vertex is 2 
    p.add_constraint(x[(n^2-1)/2] == 2)          
   # Adds in the constraint that Ax <= b 
    p.add_constraint(A*x <= b) 
    
    for i in range(len(list)):
        p.set_integer(x[list[i]])
        # Adds in constraint that inner vertices have weight 0,1, or 2
        p.add_constraint(x[list[i]] <= 2) 
    
    # Sets the objective function
    for i in range(c.nrows()):
        for j in range(c.ncols()):
            sum = sum + c[i][j]*x[j]      
    
    # Computes the minimum exponential dominating number
    p.set_objective(sum)
    ans = 26 + (n-2)^2 - p.solve();
    print n, ans, p.solve() - (n-2)^2
