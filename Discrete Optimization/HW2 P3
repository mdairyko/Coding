# Problem: Implement functions that will compute if x is a convex/affine combination of points
#  Make the function such that it will compute in any number of dimensions


# This is a small function that draws points by converting them to
# a V-polytope and a red circle at the location of x
def draw_question_convex(x, points):
    P = Polyhedron(vertices=points)
    show(P.plot() + disk(x, 0.1, (0, 2*pi), color='red'))


# This is a function where you should fill the body
# for convex combination
def find_convex_combination(x, points):
    p = MixedIntegerLinearProgram(maximization=False, solver = "GLPK")
    w = p.new_variable(integer=True, nonnegative=True)
    
    
    
    print x,'is not a convex combination of',points
    print x,'is a convex combination' #  ,convex_combination..
   
   
# This is a function where you should fill the body
# for affine combination
def find_affine_combination(x, points):
   print x,'is not an affine combination of',points
   print x,'is an affine combination'  #  , affine combination 
         

# Here are some problems, where you can test if your function is computing correctly
points = [ (0,0), (0,4), (4,0), (3,3), (2,2) ]     
x = (1,1)
draw_question_convex(x, points)
find_convex_combination(x, points)


points = [ (0,0,0), (0,4,1), (4,0,1), (2,4,4) ]     
x = (1,1,2)
#draw_question_convex(x, points)   # some java is needed to display this
find_convex_combination(x, points)


points = [ (1,1), (3,3) ]     
x = (4,4)
draw_question_convex(x, points)
find_affine_combination(x, points)


points = [ (1,1), (3,3) ]     
x = (3,4)
#draw_question_convex(x, points)
find_affine_combination(x, points)


points = [ (0,2,1), (2,0,1), (0,3,0) ]     
x = (3,0,0)
#draw_question_convex(x, points)
find_affine_combination(x, points)

points = [ (1,1,0,2), (2,0,2,0), (1,0,3,0), (0,0,3,1) ]     
find_affine_combination((2,1,1,0), points)
find_affine_combination((1,1,1,-1), points)
