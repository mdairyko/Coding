# Problem: Implement the Directed Minimum Mean Cycle algorithm in Sage. Before implementing the algorithm, show that it 
# is possible to slightly modify the algorithm.

# Notice that it is possible to slightly modify the algorithm. Instead of adding an extra vertex and edges from
# s to all other vertices, it is possible to simply assign F_0(v)=0 for all v \in V at the beginning via a simple
# reindexing argument. Therefore with this slight modification, we can go from the original algorithm to the modified
# algorithm.


def MeanCostCycle(G):
    # number of vertices
    n = G.order() 

    # This will serve as a copy, where we return only edges of the smallest
    # cycle, or we return empty graph if no cycle found
    min_mean_cycle = copy(G)
    min_mean_cycle.delete_edges(G.edge_iterator())
    
    # Prepare matrix to store Fk
    Fk = [dict() for x in range(n+1)]
    for k in range(n+1):
        for v in G:
            if k == 0:
                Fk[k][v] = 0
            else:
                Fk[k][v] = Infinity

    # prepare storage for Pk
    Pk = [dict() for x in range(n+1)]
    
    # compute all Fk (and Pk)
    for k in range(1,n+1):
        for v in G:
            for e in G.incoming_edges([v]):
                if Fk[k][v] > Fk[k-1][e[0]] + e[2]:
                    Fk[k][v] = Fk[k-1][e[0]] + e[2]
                    Pk[k][v] = [e[0]]
    # test if Fk[n] contains all infinities 
    count = 0
    for v in G:
        if Fk[n][v] == +Infinity:
            count = count + 1
        if count == len(Fk[n]):
            return [min_mean_cycle,Infinity]
    
    # if Fk[n-1] does not contain all infinities get the minium mean cycle
    
    cycle = []
    for v in G:
        vmax = 0
        for k in range(n):
            f = (Fk[n][v] - Fk[k][v])/(n-k)
            if vmax < f:
                vmax = f
        cycle.append([vmax, v])
    
    cycle_sort = sorted(cycle)
    vertex = cycle_sort[0][1]
    ratio = cycle_sort[0][0]
    
    # Return graph that is a subgraph of G, contains only edges of
    # the Minimum Mean Cycle and also return mu 
    circuit = [vertex]  
    mu = ratio
    
    for k in range(n):
        circuit+=Pk[n-k][circuit[k]]
        
    circuit.reverse()        
    H=G.copy()
    H.delete_edges(G.edge_iterator())
    for i in range(len(circuit)-1):
        H.add_edge(circuit[i], circuit[i+1],G.edge_label(circuit[i], circuit[i+1]))        
    return [H,mu]
    
# -----------------------------------------------------------   
g = DiGraph([(1,2,1), (2,3,1), (3,4,1), (1,4,1), (4,5,2) ])
g.show(edge_labels=True)
[cycle,mu] =  MeanCostCycle(g)
print "Mu=",mu
cycle.show(edge_labels=True)

# -----------------------------------------------------------
g = DiGraph([(1,2,3), (1,3,2), (2,4,-1), (3,4,1), (4,5,0), (5,6,1), (5,7,2), (6,8,1), (7,8,3), (8,1,2) ])
g.show(edge_labels=True)
[cycle,mu] =  MeanCostCycle(g)
print "Mu=",mu
cycle.show(edge_labels=True)

# -----------------------------------------------------------
# creating a directed graph graph
# the third number is edge label, in our case we use it as
# a cost of the edge
# Try all 3 test cases

g = DiGraph([(1,2,1), (2,3,2), (3,4,-1), (4,1,1), (4,2,2) ])
g.show(edge_labels=True)
[cycle,mu] =  MeanCostCycle(g)
print "Mu=",mu
cycle.show(edge_labels=True)




    
